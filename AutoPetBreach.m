%% initialize breach. Every breach driver script will typically start with
%  this command.
InitBreach;
clc;
clear S;
clear;
close all;
%% Initialize the values of various parameters appearing in this model.
% feel free to change the values of these parameters and experiment with
% them.

%initial frequency
frequency = 2;

%shape of pet
% 1: skinny
% 2: normal
% 3: fat
shapeOfPet = 2;

%Initial pet's weight (lbs)
weightOfPet = 9;

%weight of food (g)
weightOfFood = 0;

%actual amount of food(g) dispense speed (/min)
actualAmountOfFoodDispense = 3;
initialAmountGuess = 7;

%Calories per gram
% http://scheyderweb.com/cats/catfood_examples.html
caloriesPerGram = 3.5;

% sample time for this model. Using smaller sample times will lead to
% slower simulations. 
Ts = 1; % (min)

% the simulation time horizon, we will run each simulation for endTime hour
endTime = 600; % (min)

% Create an interface to the ACC_HW simulink model from Breach
S = BreachSimulinkSystem('food_control');

% The times at which we wish to observe system behavior 
tspan = 0:Ts:endTime;

% Through this command, Breach tells Simulink to provide trajectories at 
% each point in the tspan vector
S.SetTime(tspan);

% the following commands create a parameterized input signal. The 
% parameterization of the input is done such that the resulting signal
% has numCP equally spaced control points, i.e., the signal is assumed 
% to change only at the times specified by the control points 
% and remains constant between control points. 
numCP = 20;
inputGen.type = 'UniStep';
inputGen.cp = numCP;
%S.SetInputGen(inputGen);

% the above commands created numCP parameters for each input signal in the 
% simulink model. Below we create a cell array containing a list of these
% parameters. We hard-code the string 'LeadAcc' here as that is the name of
% the only input signal in this model
%params = cell(1,numCP);
% for jj=1:20
%    params{1,jj} = sprintf('food_remain:%d',jj-1);
% end
%%

% specify that at each control point, the input signal can be some vlaue
% between refFoodAmt and 0
%S.SetParamRanges(params,repmat([0 refFoodAmt],20,1));

% inspect all the parameters that breach allows us to manipulate
%S.PrintParams;

%% Sample numSimulations different random vectors of values for the 
% control points. Note that this is equivalent to creating numSimulations
% different input signal patterns for the model
numSimulations = 2;
S.QuasiRandomSample(numSimulations);

% simulate for each of the input signals generated by random sampling
S.Sim;

%% Check STL specifications. A negative number means that the test failed.
STL_ReadFile('foodRequirements.stl');
disp('Checking amount of food per second - tracking actual amount per second');
robs1 = S.CheckSpec(amountOfFood);

disp (robs1)

disp('Checking amount of food per second - between minimum and maximum');
robs2 = S.CheckSpec(betweenGuidedAmount);

disp (robs2)
%% Pretty-printing plots by getting signal values and grouping them 
% together. DO NOT USE this if numSimulations is a large number, because
% Matlab will open 'numSimulations' figure windows, and it could slow down
% your Matlab or even cause it to crash!
%signalValues = S.GetSignalValues({'','LeadPosition',...
%                               'HostVelocity','LeadAcc',...
%                              'HostAcceleration','LeadVelocity'});
signalValues = S.GetSignalValues({'isDispense','DispenseAmountPerDay','DispenseAmountPerSec', 'max', 'min','weightOfFood'});
close all;

% as a safeguard, you could use min(numSimulations,20) instead of
% numSimulations as the loop termination condition below:
for jj=1:numSimulations
    figure;
    trace = signalValues{jj};
    subplot(3,1,1);
    hold on;
    plot(tspan,trace(1,:),'-r.');
    plot(tspan,trace(6,:), '-bx');
    % title, legend code courtesy Ryan Blackwell
    title('FoodRemain');
    legend('isDispense', 'weight of food');
    
    
    subplot(3,1,2);    
    hold on;
    plot(tspan,trace(2,:),'-r.');
    plot(tspan,trace(4,:), '-bx');
    plot(tspan,trace(5,:), '-ko');
    title('Daily feeding amount');
    legend('Daily feeding amt','max','min');
    
    subplot(3,1,3);
    hold on;
    plot(tspan,trace(3,:),'-r.');
    plot(tspan,actualAmountOfFoodDispense,'bx');
    title('food dispense rate'); 
    legend('estimate','actual');
end

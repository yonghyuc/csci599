%% initialize breach. Every breach driver script will typically start with
%  this command.
InitBreach;
clc;
clear S;
close all;

%% Initialize the values of various parameters appearing in this model.
% feel free to change the values of these parameters and experiment with
% them.

%% initial water level

%level0 = 5;  %above the threshold
%level0 = 3;  % threshold
level0 = 0; %below the threshold
%%
% water flow in speed
v_flow = 225; %(cm^3/s)
level_inc = v_flow / (15 * 15); %(cm/s)

%max capicity
cap_max = 2500; %(cm^3)

%min water level
level_min = 3; %(cm)

%max water level
level_max = 8; %(cm)

% sample time for this model. Using smaller sample times will lead to
% slower simulations. 
Ts = 1; % (seconds)

% the simulation time horizon, we will run each simulation for endTime secs
endTime = 150; % (seconds)


% Create an interface to the ACC_HW simulink model from Breach
S = BreachSimulinkSystem('water_control');

% The times at which we wish to observe system behavior 
tspan = 0:Ts:endTime;

% Through this command, Breach tells Simulink to provide trajectories at 
% each point in the tspan vector
S.SetTime(tspan);

% the following commands create a parameterized input signal. The 
% parameterization of the input is done such that the resulting signal
% has numCP equally spaced control points, i.e., the signal is assumed 
% to change only at the times specified by the control points 
% and remains constant between control points. 
numCP = 20;
inputGen.type = 'UniStep';
inputGen.cp = 20;
S.SetInputGen(inputGen);

% the above commands created numCP parameters for each input signal in the 
% simulink model. Below we create a cell array containing a list of these
% parameters. We hard-code the string 'LeadAcc' here as that is the name of
% the only input signal in this model
params = cell(1,numCP);
for jj=1:20
   params{1,jj} = sprintf('pet__u%d',jj-1);
end
%%

% specify that at each control point, the input signal
S.SetParamRanges(params(1,:),repmat([0,1],20,1));
% inspect all the parameters that breach allows us to manipulate
S.PrintParams;

%% Sample numSimulations different random vectors of values for the 
% control points. Note that this is equivalent to creating numSimulations
% different input signal patterns for the model
numSimulations = 2;
S.QuasiRandomSample(numSimulations);

% simulate for each of the input signals generated by random sampling
S.Sim;



%% Check STL specifications. A negative number means that the test failed.
%% 


%% Pretty-printing plots by getting signal values and grouping them 
% together. DO NOT USE this if numSimulations is a large number, because
% Matlab will open 'numSimulations' figure windows, and it could slow down
% your Matlab or even cause it to crash!
% signalValues = S.GetSignalValues({'','LeadPosition',...
%                                'HostVelocity','LeadAcc',...
%                                'HostAcceleration','LeadVelocity'});

signalValues = S.GetSignalValues({'water_tap_control', 'control','waterlevel_out', 'pet_out_'});
close all;

% as a safeguard, you could use min(numSimulations,20) instead of
% numSimulations as the loop termination condition below:
for jj=1:numSimulations
    figure;
    trace = signalValues{jj};
    subplot(3,1,1); 
    hold on;
    plot(tspan, trace(1,:),'-r.');
    plot(tspan, trace(3,:), '-bx');
    plot(tspan, level_max, '-ko');
    
    % title, legend code courtesy Ryan Blackwell
    title('water tap control');
    legend('control','actual level','limit');
    
    subplot(3,1,2);    
    hold on;
    plot(tspan,trace(2,:),'-r.');  
    plot(tspan,trace(4,:),'-bx');
    title('water fountain control');
    legend('control', 'pet detected');
end
